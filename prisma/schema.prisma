// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts   Account[]
  leads      Lead[]
  tasks      Task[]
  properties Property[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Lead {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  number       String?
  email        String?
  date         DateTime
  lookingFor   String
  nationality  String?
  budgetFrom   Int
  budgetTo     Int
  area         String
  beds         Int
  propertyType String
  extra        String?
  comment      String?
  status       Status
  createdAt    DateTime @default(now())
  userId       String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      TaskStatus
  createdAt   DateTime   @default(now())
  userId      String     @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  date         DateTime
  location     String
  complexName  String?
  type         String
  price        Int
  beds         Int
  propertyType String
  agent        String
  conditions   String?
  comment      String?
  reference    String?
  propertyLink String?
  locationLink String?
  status       PropertyStatus
  createdAt    DateTime       @default(now())
  userId       String         @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  ACTIVE
  INACTIVE
  CLOSED
}

enum TaskStatus {
  COMPLETE
  INCOMPLETE
}

enum PropertyStatus {
  AVAILABLE
  UNAVAILABLE
}
